<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MyBlog</title>
  <icon>https://www.gravatar.com/avatar/a5aeda0dc6cb72237c026ca833ab2012</icon>
  <subtitle>Share life&amp;study ~</subtitle>
  <link href="https://xynon.top/atom.xml" rel="self"/>
  
  <link href="https://xynon.top/"/>
  <updated>2023-07-13T03:27:19.150Z</updated>
  <id>https://xynon.top/</id>
  
  <author>
    <name>xyn</name>
    <email>1615563421@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://xynon.top/2023/10/11/pytorch%E7%9F%A5%E8%AF%86/"/>
    <id>https://xynon.top/2023/10/11/pytorch%E7%9F%A5%E8%AF%86/</id>
    <published>2023-10-11T03:05:58.635Z</published>
    <updated>2023-07-13T03:27:19.150Z</updated>
    
    <content type="html"><![CDATA[<h1 id="some-examples"><a href="#some-examples" class="headerlink" title="some examples"></a>some examples</h1><p>.numpy()<br>官方文档：<a href="https://pytorch.org/docs/stable/tensors.html#torch.Tensor.numpy">https://pytorch.org/docs/stable/tensors.html#torch.Tensor.numpy</a><br>功能：将张量转换为与其共享底层存储的 n 维 numpy 数组<br>.item()<br>官方文档：torch.Tensor - PyTorch 1.11.0 documentation<br>功能：将张量的值转换为标准的 Python 数值，只有当张量仅含一个元素时才能使用它<br>.detach()<br>官方文档：Automatic differentiation package - torch.autograd<br>功能：返回一个与当前 graph 分离的、不再需要梯度的新张量<br>.cuda()<br>官方文档：<a href="https://pytorch.org/docs/stable/tensors.html#torch.Tensor.cuda">https://pytorch.org/docs/stable/tensors.html#torch.Tensor.cuda</a><br>功能：将张量拷贝到 GPU 上<br>.cpu()<br>官方文档：torch.Tensor - PyTorch 1.11.0 documentation<br>功能：将张量拷贝到 CPU 上</p><h1 id="分组卷积和深度可分离卷积"><a href="#分组卷积和深度可分离卷积" class="headerlink" title="分组卷积和深度可分离卷积"></a>分组卷积和深度可分离卷积</h1><h2 id="MobileNetV2"><a href="#MobileNetV2" class="headerlink" title="MobileNetV2"></a>MobileNetV2</h2><p><strong>参数图示</strong><br><em><strong>t</strong></em> : 升维的扩张倍数<br><em><strong>c</strong></em> : 输出通道数<br><em><strong>n</strong></em> : bottleneck 的次数<br><em><strong>s</strong></em> : 卷积核移动步长<br><img src="/../my_imgs/Sub_Pages/Articles/pytorch/MobileNetV2.jpg" alt="Alt text"></p><p><em><strong>Inverted residuals</strong></em><br><img src="/../my_imgs/Sub_Pages/Articles/pytorch/Inverted%20residuals.png" alt="Alt text"><br>整个网络是中间胖，两头窄，像一个纺锤形。<br>在<strong>projection convolution</strong>这一部分，我们不再使用ReLU激活函数而是使用<strong>线性</strong>激活函数。</p><p>下面谈谈为什么要构造一个这样的网络结构。</p><p>我们知道，如果tensor维度越低，卷积层的乘法计算量就越小。那么如果整个网络都是低维的tensor，那么整体计算速度就会很快。</p><p>然而，如果只是使用低维的tensor效果并不会好。如果卷积层的过滤器都是使用低维的tensor来提取特征的话，那么就没有办法提取到整体的足够多的信息。所以，如果提取特征数据的话，我们可能更希望有高维的tensor来做这个事情。V2就设计这样一个结构来达到平衡。</p><p>先通过<strong>Expansion layer</strong>来扩展维度，之后在用深度可分离卷积来提取特征，之后使用<strong>Projection layer</strong>来压缩数据，让网络重新变小。因为<strong>Expansion layer</strong> 和 <strong>Projection layer</strong>都是有可以学习的参数，所以整个网络结构可以学习到如何更好的扩展数据和从新压缩数据。</p><p><em><strong>depthwise convolution</strong></em></p><p><img src="/../my_imgs/Sub_Pages/Articles/pytorch/depthwise-conv.jpg" alt="Alt text"><br><img src="/../my_imgs/Sub_Pages/Articles/pytorch/pointwise-conv.jpg" alt="Alt text"></p><p>input.shape &#x3D; [c1, H, W] output.shape &#x3D; [c2, H, W]<br>(a)常规卷积参数量&#x3D;kernel_size <em>kernel_size</em> c1 <em>c2<br>(b)深度可分离卷积参数量&#x3D;kernel_size</em> kernel_size <em>c1 + 1</em> 1<em>c1</em> c2</p><p>深度可分离卷积进行一次卷积是无法达到输出指定维度的tensor的,这是由它将group设为in_channel决定的,输出的tensor通道数只能是in_channel,不能达到要求,所以又用了1<em>1的卷积改变最终输出的通道数。这样的想法也是自然而然的,BottleNeck不就是先1</em>1卷积减少参数量再3<em>3卷积feature map,最后再1</em>1恢复原来的通道数,所以BottleNeck的目的就是减少参数量。提到BottleNeck结构就是想说明1*1卷积经常用来改变通道数。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;some-examples&quot;&gt;&lt;a href=&quot;#some-examples&quot; class=&quot;headerlink&quot; title=&quot;some examples&quot;&gt;&lt;/a&gt;some examples&lt;/h1&gt;&lt;p&gt;.numpy()&lt;br&gt;官方文档：&lt;a href=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://xynon.top/2023/10/11/hello-world/"/>
    <id>https://xynon.top/2023/10/11/hello-world/</id>
    <published>2023-10-11T03:05:09.404Z</published>
    <updated>2023-03-30T08:08:37.742Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>How to kexueshangwang</title>
    <link href="https://xynon.top/2023/07/13/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    <id>https://xynon.top/2023/07/13/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/</id>
    <published>2023-07-13T09:30:00.000Z</published>
    <updated>2023-07-13T13:17:17.558Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何正确科学上网"><a href="#如何正确科学上网" class="headerlink" title="如何正确科学上网"></a>如何正确科学上网</h1><h2 id="下载clash-for-windows"><a href="#下载clash-for-windows" class="headerlink" title="下载clash for windows"></a>下载clash for windows</h2><p>Clash 是一个使用 Go 语言编写，基于规则的跨平台代理软件核心程序。<br>最好去github下载，这个是<a href="https://github.com/Fndroid/clash_for_windows_pkg">桌面版的地址</a>，还有一个是<a href="https://github.com/Dreamacro/clash">API地址</a><br>最好下载桌面版的，桌面版地址点进去之后，下载下图所指。<br><img src="/my_imgs/Sub_Pages/Articles/clash/clash_for_windows_pkg.png" alt="Alt text"></p><h2 id="安装clash-for-windows"><a href="#安装clash-for-windows" class="headerlink" title="安装clash for windows"></a>安装clash for windows</h2><p>把压缩包解压一下，打开文件夹里的clash的exe文件运行就可以了<br><img src="/my_imgs/Sub_Pages/Articles/clash/clash_setup.png" alt="Alt text"><br>打开之后是这个样子。<br><img src="/my_imgs/Sub_Pages/Articles/clash/clash_setup_GUI.png" alt="Alt text"></p><h2 id="安装iGuge-Helper插件"><a href="#安装iGuge-Helper插件" class="headerlink" title="安装iGuge Helper插件"></a>安装iGuge Helper插件</h2><p>下载网址<a href="https://iguge.net/">在这里</a><br>根据自己的浏览器下载，我的是Edge，下载之后注册登录<br><img src="/my_imgs/Sub_Pages/Articles/clash/iGuge_Helper.png" alt="Alt text"></p><p>登陆后，弹出套餐购买界面<br><img src="/my_imgs/Sub_Pages/Articles/clash/TaoCan.png" alt="Alt text"></p><p>浅尝试一下一个月套餐<br><img src="/my_imgs/Sub_Pages/Articles/clash/Payment.png" alt="Alt text"></p><p>……….%%%，家人们谁懂啊，被坑了，一定至少要买季的套餐，不然你还是没有客户端（比如clash for windows）用，他不会给你那个什么订阅🐎。wysl…</p><h2 id="使用iGuge教程"><a href="#使用iGuge教程" class="headerlink" title="使用iGuge教程"></a>使用iGuge教程</h2><p>点开插件，点击【客户端下载与订阅】<br><img src="/my_imgs/Sub_Pages/Articles/clash/iGuge_Helper_Operation1.png" alt="Alt text"><br>我的是Windows客户端，选择下面那个【Clash iGG教程】看教程就行了<br><a href="https://igghelper.com/helper/?p=413">这里</a>直接跳转</p><p>家人们谁懂啊，遇到个下头插件。。。。</p><h2 id="Clash-for-Windows使用教程"><a href="#Clash-for-Windows使用教程" class="headerlink" title="Clash for Windows使用教程"></a>Clash for Windows使用教程</h2><p>点击<a href="https://docs.cfw.lbyczf.com/">这里</a></p>]]></content>
    
    
    <summary type="html">科学上网</summary>
    
    
    
    
    <category term="GitHub" scheme="https://xynon.top/tags/GitHub/"/>
    
    <category term="科学上网" scheme="https://xynon.top/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
    <category term="clash for windows" scheme="https://xynon.top/tags/clash-for-windows/"/>
    
  </entry>
  
  <entry>
    <title>Literature Reading ———— Conformer</title>
    <link href="https://xynon.top/2023/07/13/Conformer%20%E5%8F%8Cbranch%E2%80%94%E2%80%94%E8%81%94%E5%90%88CNN%E5%92%8CViT/"/>
    <id>https://xynon.top/2023/07/13/Conformer%20%E5%8F%8Cbranch%E2%80%94%E2%80%94%E8%81%94%E5%90%88CNN%E5%92%8CViT/</id>
    <published>2023-07-13T03:39:00.000Z</published>
    <updated>2023-07-14T13:47:26.276Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Conformer"><a href="#Conformer" class="headerlink" title="Conformer"></a>Conformer</h1><p><img src="/my_imgs/Sub_Pages/Literature_Reading/Conformer/Comparison_of_feature_maps.png" alt="Alt text"></p><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>在卷积神经网络(CNN)中，卷积运算擅长提取局部特征，但难以捕捉全局表示。在visual transformer中，级联的自注意力模块可以捕获远距离特征依赖，但是会损失局部特征细节。在本文中，我们提出了一种混合网络结构，称为Conformer，以利用卷积运算和自注意机制来增强表示学习。Conformer源于特征耦合单元(FCU)，它以交互方式融合不同分辨率下的局部特征和全局表示。Conformer采用并发结构，以便最大程度地保留局部特征和全局表示。</p><p>实验表明，在参数复杂度相当的情况下，Conformer在ImageNet上的性能优于visual transformer(DeiT-B)2.3%。在MSCOCO上，它在对象检测和实例分割方面分别比ResNet-101高出3.7%和3.6%，显示了作为通用主干网络的巨大潜力。代码可在<a href="https://github.com/pengzhiliang/Conformer">github.com&#x2F;pengzhiliang&#x2F;Conformer</a>获得。</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>卷积神经网络(CNNs)能够处理非常先进的计算机视觉任务，如图像分类、对象检测和实例分割。这在很大程度上归功于卷积运算，它以分层的方式获取局部特征作为强大的图像表示。尽管CNN在局部特征提取上具有优势，但在捕捉全局表示(例如，视觉元素之间的长距离关系)方面存在困难，这对于高级计算机视觉任务来说通常是至关重要的。</p><p>最近，transformer架构已经被引入到视觉任务中。ViT方法通过将每个图像分割成具有位置嵌入的小块来构造标记序列，并应用级联transformer块来提取参数化向量作为视觉表示。由于自注意力机制和多层感知器(MLP)结构，ViT反映了复杂的空间转换和长距离特征依赖，这构成了全局表示。不过，ViT被发现其忽略了局部特征细节，这降低了背景和前景之间的可分辨性，图1(c)和(g)。改进的ViT已经提出了标记化模块或者利用CNN特征图作为输入标记来捕获特征邻近信息。然而，如何精确地将局部特征和全局表示相互嵌入的问题仍然存在。</p><p>在本文中，我们提出了一种双重网络结构，称为Conformer，旨在将基于CNN的局部特征与基于transformer的全局表示相结合，以增强表示学习。Conformer由一个CNN分支和一个transformer分支组成，分别遵循ResNet和ViT的设计。这两个分支形成了局部卷积块、自注意力模块和MLP单元的综合组合。在训练期间，交叉熵损失被用于监督CNN和transformer分支，以耦合CNN类型和transformer类型的特征。</p><p>考虑到CNN和transformer特征之间的特征不一致性，我们设计了特征耦合单元(FCU)作为桥梁。一方面，为了融合两种类型的特征，FCU利用1×1卷积来对齐通道维度，下&#x2F;上采样策略来对齐特征分辨率，LayerNorm和BatchNorm来对齐特征值。另一方面，由于CNN和transformer分支倾向于捕捉不同级别的特征(例如，局部和全局)，FCU被插入到每个块中，以交互方式连续消除它们之间的语义差异。这种融合过程可以极大地增强局部特征的全局感知能力和全局表示的局部细节。</p><p>图1展示了Conformer耦合局部特征和全局表示的能力。虽然传统的CNN(例如，ResNet-101)倾向于保留有区别的局部区域(例如，孔雀的头部或尾部)，但Conformer的CNN分支可以激活整个对象范围，图1(b)和(f)。当单独使用transformer时，对于弱的局部特征(例如，模糊的对象边界)，很难将对象与背景区分开，图1(c)和(g)。局部特征和全局表示的耦合显著增强了基于transformer的特征的可辨别性，图1(d)和(h)。</p><p>本文的贡献包括:</p><ul><li>我们提出了一种双重网络结构，称为Conformer，它最大限度地保留了局部特征和全局表示。</li><li>我们提出了特征耦合单元(FCU)，以交互方式将卷积局部特征与基于transformer的全局表示融合。</li><li>在可比较的参数复杂性下，Conformer明显优于CNN和visual transformers。Conformer继承了CNN和visual transformers的结构和泛化优势，展示了成为通用骨干网络的巨大潜力。</li></ul><h2 id="相关工作"><a href="#相关工作" class="headerlink" title="相关工作"></a>相关工作</h2><h2 id="Conformer介绍"><a href="#Conformer介绍" class="headerlink" title="Conformer介绍"></a>Conformer介绍</h2><p><img src="/my_imgs/Sub_Pages/Literature_Reading/Conformer/Network_architecture_of_Conformer.png" alt="Alt text"></p><h3 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h3><p>局部特征和全局表征两个都很重要，在视觉描述符的漫长历史中被广泛研究。局部特征及其描述符[33，26，34]是局部图像邻域的紧凑矢量表示，已经成为许多计算机视觉算法的构建模块。全局表示包括但不限于轮廓表示、形状描述符和远距离对象类型[31]。在深度学习时代，CNN通过卷积运算以分层的方式收集局部特征，并将局部线索保留为特征图。视觉转换器被认为通过级联的自关注模块以软方式在压缩的补丁嵌入中聚集全局表示。</p><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2>]]></content>
    
    
    <summary type="html">精读Conformer文章(https://arxiv.org/abs/2105.03889)</summary>
    
    
    
    
    <category term="GitHub" scheme="https://xynon.top/tags/GitHub/"/>
    
    <category term="Literature Reading" scheme="https://xynon.top/tags/Literature-Reading/"/>
    
    <category term="Conformer" scheme="https://xynon.top/tags/Conformer/"/>
    
  </entry>
  
  <entry>
    <title>How to create my blog with hexo and github?</title>
    <link href="https://xynon.top/2023/03/30/%E5%88%9B%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%BF%87%E7%A8%8B/"/>
    <id>https://xynon.top/2023/03/30/%E5%88%9B%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%BF%87%E7%A8%8B/</id>
    <published>2023-03-30T11:00:00.000Z</published>
    <updated>2023-03-31T15:19:00.595Z</updated>
    
    <content type="html"><![CDATA[<h3 id="注册github"><a href="#注册github" class="headerlink" title="注册github"></a>注册github</h3><p>直接注册，这个不用说</p><h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><p>1.进入<a href="https://git-scm.com/" title="git官网">git官网</a><br><img src="/my_imgs/Sub_Pages/Articles/create_blog/git_download1.png" alt="Alt text"></p><p>2.选择对应系统以及对应版本（我的是Windows和64位）<br><img src="/my_imgs/Sub_Pages/Articles/create_blog/git_download2.png" alt="Alt text"><br><img src="/my_imgs/Sub_Pages/Articles/create_blog/git_download3.png" alt="Alt text"></p><p>3.下载之后就选择安装位置（别C，如果只有一个盘当我没说），默认选项一直next就行<br><strong>不配图了，已经装过了</strong></p><p>4.安装完成后，打开任意一个文件夹，右键打开<strong>Git Bash Here</strong>（以后会经常用），输入git回车，显示一长串说明安装成功<br><img src="/my_imgs/Sub_Pages/Articles/create_blog/git_download4.png" alt="Alt text"><br><img src="/my_imgs/Sub_Pages/Articles/create_blog/git_download5.png" alt="Alt text"><br><img src="/my_imgs/Sub_Pages/Articles/create_blog/git_download6.png" alt="Alt text"></p><p>5.将git设为管理员运行，为了后面不会出错，并且方便，跟着我这样做<br>从开始里，打开这个<strong>快捷方式</strong>所在位置<br><img src="/my_imgs/Sub_Pages/Articles/create_blog/git_download7.png" alt="Alt text"><br>打开<strong>Git Bash</strong>属性，找到<strong>兼容性</strong>选项卡，勾上<strong>管理员身份</strong>运行这个选项，然后保存确认退出<br><img src="/my_imgs/Sub_Pages/Articles/create_blog/git_download8.png" alt="Alt text"></p><h3 id="创建仓库repository并绑定"><a href="#创建仓库repository并绑定" class="headerlink" title="创建仓库repository并绑定"></a>创建仓库repository并绑定</h3><p>1.github里面New一个仓库，名字随便取（我取的Blog）</p><p>2.打开<strong>Git Bash Here</strong>，输入以下内容，根据自己情况改一下 <em><strong>yourname</strong></em> 和 <em><strong>youremail</strong></em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;yourname&quot;</span><br><span class="line">git config --global user.email &quot;youremail&quot;</span><br></pre></td></tr></table></figure><p><img src="/my_imgs/Sub_Pages/Articles/create_blog/binding_github7.png" alt="Alt text"></p><p>3.输入<strong>ssh</strong>看本机是否安装<br><img src="/my_imgs/Sub_Pages/Articles/create_blog/binding_github1.png" alt="Alt text"></p><p>输入以下内容，生成密匙id_rsa 和公钥 <em><strong>id_rsa.pub</strong></em><br><code>ssh-keygen -t rsa</code></p><p><img src="/my_imgs/Sub_Pages/Articles/create_blog/binding_github2.png" alt="Alt text"></p><p>找到公钥 <em><strong>id_rsa.pub</strong></em> 文件，使用记事本打开，复制里面的内容<br><img src="/my_imgs/Sub_Pages/Articles/create_blog/binding_github3.png" alt="Alt text"></p><p>4.打开<strong>github</strong>的 <em><strong>settings</strong></em><br><img src="/my_imgs/Sub_Pages/Articles/create_blog/binding_github4.png" alt="Alt text"></p><p>5.打开<strong>SSH and GPG keys</strong>，新建一个 <em><strong>SSH</strong></em>，标题随便取，把复制的内容粘进去就行<br><img src="/my_imgs/Sub_Pages/Articles/create_blog/binding_github5.png" alt="Alt text"><br><img src="/my_imgs/Sub_Pages/Articles/create_blog/binding_github6.png" alt="Alt text"></p><p>6.验证是否绑定成功<br>打开<strong>Git Bash Here</strong>，输入以下内容<br><code>ssh -T git@github.com</code><br>如果是第一次会问你是否连接（connecting），输入yes就行<br><img src="/my_imgs/Sub_Pages/Articles/create_blog/binding_github8.png" alt="Alt text"></p><h3 id="安装-node-js"><a href="#安装-node-js" class="headerlink" title="安装 node.js"></a>安装 node.js</h3><p>1.下载安装<strong>node.js</strong><br>官网下载地址<a href="https://nodejs.org/en">在此</a><br>咱就是说建议安装 <strong>LTS</strong> 版本的<br>国外官网下载较慢，使用<a href="https://nodejs.org/zh-cn/download/">镜像下载</a>，一直next就完事了<br><img src="/my_imgs/Sub_Pages/Articles/create_blog/download_nodejs2.png" alt="Alt text"></p><p>2.验证安装，打开<strong>cmd</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><p><img src="/my_imgs/Sub_Pages/Articles/create_blog/download_nodejs.png" alt="Alt text"></p><p>3.设置<strong>npm</strong>安装的全局路径，别占<strong>C</strong>盘！<br>在安装文件夹中创建两个新文件夹<strong>node_cache</strong>和<strong>node_global</strong><br><img src="/my_imgs/Sub_Pages/Articles/create_blog/download_nodejs3.png" alt="Alt text"></p><p>打开<strong>cmd</strong>输入以下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config set prefix &quot;你的node_global绝对路径&quot;</span><br><span class="line">npm config set cache &quot;你的node_cache绝对路径&quot;</span><br></pre></td></tr></table></figure><p>4.设置环境变量<br>打开 <em><strong>win10系统 –&gt; 打开控制面板 –&gt; 系统 –&gt;高级系统设置 –&gt; 环境变量</strong></em></p><p>新建系统变量<strong>NODE_PATH:</strong> <em>node_global\node_modules</em><br><img src="/my_imgs/Sub_Pages/Articles/create_blog/download_nodejs4.png" alt="Alt text"></p><p>添加环境变量<strong>PATH:</strong> <em>node_global</em><br><img src="/my_imgs/Sub_Pages/Articles/create_blog/download_nodejs5.png" alt="Alt text"></p><p>5.测试一下<br>打开<strong>cmd</strong>，输入<br><code>npm install webpack -g</code></p><p>然后webpack就安装在默认的 <em><strong>node_global\node_modules</strong></em> 文件夹中了<br><img src="/my_imgs/Sub_Pages/Articles/create_blog/download_nodejs6.png" alt="Alt text"></p><h3 id="Hexo安装并部署GitHub"><a href="#Hexo安装并部署GitHub" class="headerlink" title="Hexo安装并部署GitHub"></a>Hexo安装并部署GitHub</h3><p>1.安装<strong>Hexo</strong><br>在<strong>D</strong>盘新建一个空的文件夹 <em><strong>Blog</strong></em> ，在 <em><strong>Blog</strong></em> 中打开 <strong>Git Bash Here</strong>，输入以下进行安装<br><code>npm install -g hexo-cli</code></p><p>安装好后输入以下进行初始化<br><code>hexo init</code></p><p>然后输入以下进行静态部署 <em><strong>(generate)</strong></em><br><code>hexo g</code></p><p>最后输入以下进行本地查看 <em><strong>(server)</strong></em> ，浏览器输入它给的网站哈！<br><code>hexo s</code></p><p><img src="/my_imgs/Sub_Pages/Articles/create_blog/install_Hexo1.png" alt="Alt text"></p><p>注意哈！<strong>git bash</strong> 里面复制粘贴要用 <em><strong>Ctrl + Insert</strong></em> 和 <em><strong>Shift + Insert</strong></em></p><p>2.将Hexo部署到github<br>打开 <em><strong>Blog</strong></em> 下的 <em><strong>_config.yml</strong></em> 文件（<em>VSCode</em> 或者记事本）<br><img src="/my_imgs/Sub_Pages/Articles/create_blog/install_Hexo2.png" alt="Alt text"></p><p>滑到底部修改一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:CFOP-xyn/Blog.git  #你的仓库地址</span><br><span class="line">  branch: blog-pages #你的分支</span><br></pre></td></tr></table></figure><p><img src="/my_imgs/Sub_Pages/Articles/create_blog/install_Hexo3.png" alt="Alt text"></p><p>你的仓库地址和分支（这个分支是我新建的，然后你得在<strong>仓库里的设置</strong>里把你要的分支设为默认）</p><p><img src="/my_imgs/Sub_Pages/Articles/create_blog/install_Hexo4.png" alt="Alt text"><br><img src="/my_imgs/Sub_Pages/Articles/create_blog/install_Hexo7.png" alt="Alt text"></p><p>下面有<strong>坑</strong>啊，注意（ <em><strong>_config.yml</strong></em> 文件）<br>设置这个网站网址，他这个改版之后啊（<del>网上的教程大部分是改版前</del>），不太一样，就按我这样改<br>先打开<strong>仓库的设置</strong><br><img src="/my_imgs/Sub_Pages/Articles/create_blog/install_Hexo6.png" alt="Alt text"><br>蓝色箭头那个，点开有个 <em><strong>GitHub Actions</strong></em> 的选项，选了这个你后面的网站地址才是 <em><strong><a href="https://github名字.github.io/">https://github名字.github.io</a></strong></em><br>如果是我图上的这个的话就是 <em><strong><a href="https://github名字.github.io/%E4%BB%93%E5%BA%93%E5%90%8D">https://github名字.github.io/仓库名</a></strong></em><br>建议看<a href="https://hexo.io/zh-cn/docs/github-pages">Hexo官网部署教程</a>，里面解释详细<br><img src="/my_imgs/Sub_Pages/Articles/create_blog/install_Hexo8.png" alt="Alt text"><br>你的 <em><strong>url</strong></em> 和 <em><strong>root</strong></em> 也要对应上面的情况，下面是我的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">url: https://github名字.github.io/仓库名</span><br><span class="line">root: /仓库名/</span><br></pre></td></tr></table></figure><p><img src="/my_imgs/Sub_Pages/Articles/create_blog/install_Hexo5.png" alt="Alt text"></p><p>3.回到 <em><strong>Blog</strong></em> 文件夹，安装 <em><strong>GitHub</strong></em> 部署插件<br><code>npm install hexo-deployer-git --save</code></p><p>4.记住以下命令吧！常用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean # 删除public文件夹还有啥，自己试试</span><br><span class="line">hexo g # 将根目录(Blog)的source文件夹和themes的主题拷贝到生成的public文件夹</span><br><span class="line">hexo d # 将public文件夹同步到github仓库</span><br></pre></td></tr></table></figure><p>5.访问你的 <em><strong>Blog</strong></em><br>进入网址 你的url，前面填的<br>比如我的就是<a href="https://cfop-xyn.github.io/Blog">https://cfop-xyn.github.io/Blog</a></p>]]></content>
    
    
    <summary type="html">怎么创建个人博客网站，请看这里！</summary>
    
    
    
    
    <category term="GitHub" scheme="https://xynon.top/tags/GitHub/"/>
    
    <category term="Hexo" scheme="https://xynon.top/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>我的第一篇博客</title>
    <link href="https://xynon.top/2023/03/30/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <id>https://xynon.top/2023/03/30/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</id>
    <published>2023-03-30T08:53:02.000Z</published>
    <updated>2023-03-30T10:41:30.924Z</updated>
    
    <content type="html"><![CDATA[<p>一级标题不会啊</p><p>代码测试：<br><code>我是反引号``，我在左上角！</code><br><code>print(&quot;Hello World!&quot;)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我是高亮代码块</span><br></pre></td></tr></table></figure><p>图片测试：<br><img src="/article_imgs/AQi_ShiSan.png" alt="阿七和十三"></p><p>引用测试：</p><blockquote><p>这是一条引用</p></blockquote><h2 id="还是想写一级标题"><a href="#还是想写一级标题" class="headerlink" title="还是想写一级标题"></a>还是想写一级标题</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一级标题不会啊&lt;/p&gt;
&lt;p&gt;代码测试：&lt;br&gt;&lt;code&gt;我是反引号``，我在左上角！&lt;/code&gt;&lt;br&gt;&lt;code&gt;print(&amp;quot;Hello World!&amp;quot;)&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;</summary>
      
    
    
    
    
  </entry>
  
</feed>
